/**
 * Created by liuyujing on 16/10/7.
 */
(function () {

    StartGame();

})();

/*
定义变量：var
for
while
do while
if
switch
function 方法名(参数列表){函数体}
function 类名(){

}
var 类名 = function(){}
this:谁调用 this就是谁

 数组：var list = [字符串,数字,对象];
 字面量创建对象 {属性名:值,属性名:值};
 通过类名创建对象 var xiaoming = new Person();

继承：子类拥有父类所有公开的方法属性 但是 父类不能使用子类独有的方法或者属性
实现：子类的原型是父类的原型 父类的构造方法 是子类的构造方法

变量的作用域：
全局变量：在花括号外面声明的  从声明的位置开始 到结束 都可以使用
局部变量：在花括号内声明的  从声明的位置开始 到花括号结束 都可以使用

原型链：一级级从自己内容查找某个属性或者方法 如果没有查找到就从父类中去查找 ->>>>>

多态：同一个对象使用同样的方法 这个方法有不同的实现
通过改变对象的构造器实现

闭包：
函数里面嵌套函数
可以通过里面的函数 得到 函数内部的私有变量
set get

dom
createElement
appendChild
className
id
style
getElementByID
getElementsByClassName


*/

// var xiaoming = new Person();
// xiaoming.name = "";
//
// function Person() {
//     this.move  = function () {
//
//     }
// }
// Person.prototype.name


/*
* 找色块分析
*
* 界面：
* 1.封装小方块的视图
* 2.底部背景图
* 3.不管是正确还是错误  选择完 都会移除所有的小方块 -> 移除背景图（上面的内容也会被移除）
*
* 逻辑：
* 1.点击颜色不同的 增加游戏难度 继续游戏
* 2.点击错误 重置游戏
*
* 伪代码实现部分：
* 0.底部背景图 w:400 h:400
* 1.封装色块:需要的参数：行数、颜色、不透明度
*   宽:？
*       row:2 间距3
*       row:3 间距4
*       row:4 间距5
*       总共有多少个边距 = 行数+1
*       总边距：总共有多少个边距*边距
*       所有色块所占的宽度 = 总宽度-总边距
*       每一个色块的宽度 = 所有色块所占的宽度/行数
*   边距:5px
*       设置色块的 外边距：top left
*   颜色:有
*   不透明度:1.0
*   浮动
* 2.封装游戏实现部分
*   界面：
*      底部背景图
*           w:400
*           h:400
*           背景颜色
*           边框
*           页面居中
*      底部背景图 上面放了很多小色块
*           颜色数组：
*           行数
*           铺色块：
*               色块的数量：行数*行数
*               特殊的色块：
*                   随机一个色块 -> 改变这个色块的不透明度
*   逻辑：
*       普通色块的点击事件
*       找到特殊的色块 给他一个点击事件
*       成功
*           让行数+1
*           替换上一个界面
*       失败
*           重置界面
*       重新更新颜色
*
* */






















/*
* 作业
* 找色块
*
* 1.记录过了多少关
* 2.等级显示 5关涨一级
*
* 调节难度
*   让颜色每五关更接近一些
*   设置初始的难度等级
*       初级 每五关增加一次行数
*       中级 每三关增加一次行数
*       高级 每一关增加一次行数
*
* */
