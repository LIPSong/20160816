面向对象-NO.3 继承
	概念：
		类：具有某些相同的《特征》和《行为》的抽象事物
			特征:没有具体 《值》
			行为:只是声明实现了这个《函数》 但是 《未调用》
		对象：是一个有具体《特征》和《行为》的真实存在
			特征:有具体 《值》
			行为:当希望使用这个《行为》的时候 就去调用《类》里面声明的函数
	类与对象的关系
		1.有类才能有对象
		2.《类》决定了《对象》《初始》的时候 所拥有的《特征》和《行为》
		3.类相当于模具 可以复制很多成品
	JavaScript类的实现
		公式：
			var 类名(首字母大写) = function{特征 行为};
	查看属于什么类型typeof 
		null
		undefined
		number new Number(1);
		boolean
		string
		object 
	判断是否为某个类的对象
		instanceof 返回值 是boolean
		对象名 instanceof 类名 
	类中的行为
		解释：
			行为与特征
				特征：=== 表象的描述
					实例化对象之后  对象 就存在的（颜色 品牌 车牌号）
				行为：=== 能力
					也是实例化对象之后就具备的  只不过是当使用的时候 才会去执行
					并不是创建了对象 行为就执行了
			1.行为:是对象可以使用的某个方法（函数）
				公式：this.行为名 = function(参数列表){};
			2.示例：比如人类《类》可以使用工具 小明《对象》就具备了使用工具的行为
		实现方式：
			1.在类中去添加内部的行为
			2.通过prototype去添加行为
				公式：类名.prototype.行为名 = function(){};
		练习：
			1.定义Car类 类中包含特征（颜色 品牌 车牌号）和行为（驾驶）
	prototype 原型类型
		1.可以获得类 引用的原型
		2.在类的外部 向类添加属性或行为 添加之后  所有的对象 都会具备 添加的属性或行为
		但这些不会认为是自己原有的属性方法
		hasOwnProperty：查看是不是自己的属性
	JavaScript中的方法
		对象方法:在类里面声明的方法 叫做对象方法
		原型方法:通过prototype添加的方法 叫做原型方法
		------前面两种是使用对象名去调用的-------
		类方法:直接使用《类名》去调用方法
	回顾this
	使用关键字《new》创建对象 和 直接创建的区别
		直接调用方法 得到的是undefined ？ 
		new关键字的作用：前面加上new 就会认为这个方法是一个构造方法->得到一个构造之后的结果->就是创建好的对象
			new帮咱们调用了创建这个对象的一个方法 -> 构造方法
			构造方法是用来创建对象的函数
			任何函数使用new表达式就是构造函数
	call
		意义：可以使用call设置this
		call 调用一个函数，传入函数执行上下文及参数
		类名.call(this, param1, param2...);
	继承
		JavaScript并不提供原生的继承机制
		继承的概念：子类可以使用父类中的 属性和方法
		子类 父类
		constructor：构造器 表示创建对象使用的是哪种方法
		对象如何被创建的？
			new -> 就会通过prototype找到constructor->就会去调用构造方法 创建一个对象

		继承的实现思路
			1.父类的构造器 设置为 子类的构造器
			2.子类的原型 设置为 父类的原型
		Object中包含一个create的类方法 可以让我们去创建一个原型
				Object.create(xxx.prototype)
			示例：
				function inherit(subType,superType) {
        			var _prototype = Object.create(superType.prototype);
        			_prototype.constructor = subType;
        			subType.prototype = _prototype;
    			}
		原型链是层层向上查找 如果最后没有就返回undefined
			prototype：原型类型 表示类属于哪一个类型的（如父类是Person 他就是Person类型的）
			__proto__：原型 对象属于那个类型
	多个文件 解决污染全局变量
		(function(){})();
	面向对象的特征
		封装
		继承
		多态










未理解
	1.this




