面向对象编程
	类(prototype<原型>)、对象概念：
		1.类 抽象出一个事物的共同(属性)特征和行为（方法）
		2.对象 将抽象的事物 具体化 是一个真实存在的东西
		3.对象是一个无序的复合类型 

	创建对象的方式：
		1.键值对 {key:值,key2:值1} 值可以是任意内容
		2.function

	this
	new
	prototype
	__proto__

	Array、Boolean、String、Number
	var list = new Array();

	Date
		Date()	返回当日的日期和时间。
		getDate()	从 Date 对象返回一个月中的某一天 (1 ~ 31)。
		getDay()	从 Date 对象返回一周中的某一天 (0 ~ 6)。
		getMonth()	从 Date 对象返回月份 (0 ~ 11)。
		getFullYear()	从 Date 对象以四位数字返回年份。
		getHours()	返回 Date 对象的小时 (0 ~ 23)。
		getMinutes()	返回 Date 对象的分钟 (0 ~ 59)。
		getSeconds()	返回 Date 对象的秒数 (0 ~ 59)。
		getMilliseconds()	返回 Date 对象的毫秒(0 ~ 999)。
		getTime()	返回 1970 年 1 月 1 日至今的毫秒数。
		getTimezoneOffset()	返回本地时间与格林威治标准时间 (GMT) 的分钟差。
		getUTCDate()	根据世界时从 Date 对象返回月中的一天 (1 ~ 31)。
		getUTCDay()	UTC(Coordinated Universal Time)根据世界时从 Date 对象返回周中的一天 (0 ~ 6)。
		getUTCMonth()	根据世界时从 Date 对象返回月份 (0 ~ 11)。
		getUTCFullYear()	根据世界时从 Date 对象返回四位数的年份。
		getUTCHours()	根据世界时返回 Date 对象的小时 (0 ~ 23)。
		getUTCMinutes()	根据世界时返回 Date 对象的分钟 (0 ~ 59)。
		getUTCSeconds()	根据世界时返回 Date 对象的秒钟 (0 ~ 59)。
		getUTCMilliseconds()	根据世界时返回 Date 对象的毫秒(0 ~ 999)。
		parse()	返回1970年1月1日午夜到指定日期（字符串）的毫秒数。
		setDate()	设置 Date 对象中月的某一天 (1 ~ 31)。
		setMonth()	设置 Date 对象中月份 (0 ~ 11)。
		setFullYear()	设置 Date 对象中的年份（四位数字）。
		setYear()	请使用 setFullYear() 方法代替。
		setHours()	设置 Date 对象中的小时 (0 ~ 23)。
		setMinutes()	设置 Date 对象中的分钟 (0 ~ 59)。
		setSeconds()	设置 Date 对象中的秒钟 (0 ~ 59)。
		setMilliseconds()	设置 Date 对象中的毫秒 (0 ~ 999)。
		setTime()	以毫秒设置 Date 对象。
		setUTCDate()	根据世界时设置 Date 对象中月份的一天 (1 ~ 31)。
		setUTCMonth()	根据世界时设置 Date 对象中的月份 (0 ~ 11)。
		setUTCFullYear()	根据世界时设置 Date 对象中的年份（四位数字）。
		setUTCHours()	根据世界时设置 Date 对象中的小时 (0 ~ 23)。
		setUTCMinutes()	根据世界时设置 Date 对象中的分钟 (0 ~ 59)。
		setUTCSeconds()	根据世界时设置 Date 对象中的秒钟 (0 ~ 59)。
		setUTCMilliseconds()	根据世界时设置 Date 对象中的毫秒 (0 ~ 999)。
		toString()	把 Date 对象转换为字符串。
		toTimeString()	把 Date 对象的时间部分转换为字符串。
		toDateString()	把 Date 对象的日期部分转换为字符串。
		toUTCString()	根据世界时，把 Date 对象转换为字符串。
		toLocaleString()	根据本地时间格式，把 Date 对象转换为字符串。
		toLocaleTimeString()	根据本地时间格式，把 Date 对象的时间部分转换为字符串。
		toLocaleDateString()	根据本地时间格式，把 Date 对象的日期部分转换为字符串。
		UTC()	根据世界时返回 1970 年 1 月 1 日 到指定日期的毫秒数。
		valueOf()	返回 Date 对象的原始值。
	Math
		abs(x)	返回数的绝对值。
		acos(x)	返回数的反余弦值。
		asin(x)	返回数的反正弦值。
		atan(x)	以介于 -PI/2 与 PI/2 弧度之间的数值来返回 x 的反正切值。
		atan2(y,x)	返回从 x 轴到点 (x,y) 的角度（介于 -PI/2 与 PI/2 弧度之间）。
		ceil(x)	对数进行上舍入。
		cos(x)	返回数的余弦。
		exp(x)	返回 e 的指数。
		floor(x)	对数进行下舍入。
		log(x)	返回数的自然对数（底为e）。
		max(x,y)	返回 x 和 y 中的最高值。
		min(x,y)	返回 x 和 y 中的最低值。
		pow(x,y)	返回 x 的 y 次幂。
		random()	返回 0 ~ 1 之间的随机数。
		round(x)	把数四舍五入为最接近的整数。
		sin(x)	返回数的正弦。
		sqrt(x)	返回数的平方根。
		tan(x)	返回角的正切。
	RegExp
		new RegExp(pattern, attributes);
		attributes
			i	执行对大小写不敏感的匹配。
			g	执行全局匹配（查找所有匹配而非在找到第一个匹配后停止）。
			m	执行多行匹配。
		方括号用于查找某个范围内的字符：
			[abc]	查找方括号之间的任何字符。
			[^abc]	查找任何不在方括号之间的字符。
			[0-9]	查找任何从 0 至 9 的数字。
			[a-z]	查找任何从小写 a 到小写 z 的字符。
			[A-Z]	查找任何从大写 A 到大写 Z 的字符。
			[A-z]	查找任何从大写 A 到小写 z 的字符。
			[adgk]	查找给定集合内的任何字符。
			[^adgk]	查找给定集合外的任何字符。
			(red|blue|green)	查找任何指定的选项。
		元字符（Metacharacter）是拥有特殊含义的字符：
			.	查找单个字符，除了换行和行结束符。
			\w	查找单词字符。
			\W	查找非单词字符。
			\d	查找数字。
			\D	查找非数字字符。
			\s	查找空白字符。
			\S	查找非空白字符。
			\b	匹配单词边界。
			\B	匹配非单词边界。
			\0	查找 NUL 字符。
			\n	查找换行符。
			\f	查找换页符。
			\r	查找回车符。
			\t	查找制表符。
			\v	查找垂直制表符。
			\xxx	查找以八进制数 xxx 规定的字符。
			\xdd	查找以十六进制数 dd 规定的字符。
			\uxxxx	查找以十六进制数 xxxx 规定的 Unicode 字符。
		量词	
			n+	匹配任何包含至少一个 n 的字符串。
			n*	匹配任何包含零个或多个 n 的字符串。
			n?	匹配任何包含零个或一个 n 的字符串。
			n{X}	匹配包含 X 个 n 的序列的字符串。
			n{X,Y}	匹配包含 X 或 Y 个 n 的序列的字符串。
			n{X,}	匹配包含至少 X 个 n 的序列的字符串。
			n$	匹配任何结尾为 n 的字符串。
			^n	匹配任何开头为 n 的字符串。
			?=n	匹配任何其后紧接指定字符串 n 的字符串。
			?!n	匹配任何其后没有紧接指定字符串 n 的字符串。
		字符串支持正则的方法
			search	检索与正则表达式相匹配的值
			match	找到一个或多个正则表达式的匹配。
			replace	替换与正则表达式匹配的子串。	
			split	把字符串分割为字符串数组。
	Bom
		Window
		Navigator
		Screen
		History
		Location
	Dom
		dom介绍

		使用步骤：
			1.创建节点
			2.添加到另一个节点
			3.设置样式
		方法	描述
			DOM Document
				document.body	返回文档的body元素
				document.createElement()创建元素节点
				document.createAttribute()	
				document.setAttributeNode()
				创建一个属性节点
					var att = document.createAttribute("class");
    				att.value = "bg";
    				div.setAttributeNode(att);
				document.createTextNode()	创建文本节点。
				document.getElementById()	使用ID获得节点
				document.getElementsByName()	通过name名字找到对应对象集合
				document.getElementsByTagName()	通过标签名的找到对应对象集合
				document. getElementsByClassName() 得到类名是什么 的所有节点
				document.addEventListener() 添加监听事件
				document.write()
				document.writeln()	等同于 write() 方法，不同的是在每个表达式之后写一个换行符。
			DOM Element
				element.addEventListener()	添加监听事件
				element.appendChild()	为元素添加一个新的子元素
				element.attributes	获得元素属性数组
				element.childNodes	获得元素的一个子节点的数组
				element.className	设置或返回元素的class属性
				element.cloneNode()	克隆某个元素
				element.firstChild	返回元素的第一个子节点
				element.focus()	设置文档或元素获取焦点
				element.getAttribute()	返回指定元素的属性值
				element.getAttributeNode()	返回指定属性节点
				element.getElementsByTagName()	返回指定标签名的所有子元素集合。
				element. getElementsByClassName()	返回文档中所有指定类名的元素集合，作为 NodeList 对象。
				element.hasAttribute()	如果元素中存在指定的属性返回 true，否则返回false。
				element.hasAttributes()	如果元素有任何属性返回true，否则返回false。
				element.hasChildNodes()	返回一个元素是否具有任何子元素
				element.hasfocus()	返回布尔值，检测文档或元素是否获取焦点
				element.id	设置或者返回元素的 id。
				element.innerHTML	插入HTML代码
				element.insertBefore()	现有的子元素之前插入一个新的子元素
				element.isContentEditable	如果元素内容可编辑返回 true，否则返回false
				element.lastChild	返回的最后一个子元素
				element.nodeType	返回元素的节点类型
				element.nodeValue	返回元素的节点值
				element.parentNode	返回元素的父节点
				element.removeAttribute()	从元素中删除指定的属性
				element.removeAttributeNode()	删除指定属性节点并返回移除后的节点。
				element.removeChild()	删除一个子元素
				element.removeEventListener()	移除由 addEventListener() 方法添加的事件句柄
				element.replaceChild()	替换一个子元素
				element.scrollHeight	返回整个元素的高度（包括带滚动条的隐蔽的地方）
				element.scrollLeft	返回当前视图中的实际元素的左边缘和左边缘之间的距离
				element.scrollTop	返回当前视图中的实际元素的顶部边缘和顶部边缘之间的距离
				element.scrollWidth	返回元素的整个宽度（包括带滚动条的隐蔽的地方）
				element.setAttribute()	设置或者改变指定属性并指定值。
				element.setAttributeNode()	设置或者改变指定属性节点。
				element.textContent	设置或返回一个节点和它的文本内容
			DOM Attribute
				attr.name	返回属性名称
				attr.value	设置或者返回属性值
				nodemap.getNamedItem()	从节点列表中返回的指定属性节点。
				nodemap.item()	返回节点列表中处于指定索引号的节点
				nodemap.removeNamedItem()	删除指定属性节点
				nodemap.setNamedItem()	设置指定属性节点(通过名称)
			DOM Event
				鼠标
					onclick	当用户点击某个对象时调用的事件句柄。
					ondblclick	当用户双击某个对象时调用的事件句柄。	
					onmousedown	鼠标按钮被按下。	
					onmouseenter	当鼠标指针移动到元素上时触发。	
					onmouseleave	当鼠标指针移出元素时触发	
					onmousemove	鼠标被移动。	
					onmouseover	鼠标移到某元素之上。	
					onmouseout	鼠标从某元素移开。	
					onmouseup	鼠标按键被松开。
				键盘
					onkeydown	某个键盘按键被按下。	
					onkeypress	某个键盘按键被按下并松开。	
					onkeyup	某个键盘按键被松开。
				对象
					onabort	图像的加载被中断。 ( <object>)	
					onbeforeunload	该事件在即将离开页面（刷新或关闭）时触发	
					onerror	在加载文档或图像时发生错误。 ( <object>, <body>和 <frameset>)	 
					onhashchange	该事件在当前 URL 的锚部分发生修改时触发。	 
					onload	一张页面或一幅图像完成加载。	
					onpageshow	该事件在用户访问页面时触发	
					onpagehide	该事件在用户离开当前网页跳转到另外一个页面时触发	
					onresize	窗口或框架被重新调整大小。	
					onscroll	当文档被滚动时发生的事件。	
					onunload	用户退出页面。 ( <body> 和 <frameset>)
				表单事件
					onblur	元素失去焦点时触发	
					onchange	该事件在表单元素的内容改变时触发( <input>, <keygen>, <select>, 和 <textarea>)	
					onfocus	元素获取焦点时触发	
					onfocusin	元素即将获取焦点时触发	
					onfocusout	元素即将失去焦点时触发	
					oninput	元素获取用户输入时触发	
					onreset	表单重置时触发	
					onsearch	用户向搜索域输入文本时触发 ( <input="search">)	 
					onselect	用户选取文本时触发 ( <input> 和 <textarea>)	
					onsubmit	表单提交时触发
				剪切板事件
					oncopy	该事件在用户拷贝元素内容时触发	 
					oncut	该事件在用户剪切元素内容时触发	 
					onpaste	该事件在用户粘贴元素内容时触发
				打印事件
					onafterprint	该事件在页面已经开始打印，或者打印窗口已经关闭时触发	 
					onbeforeprint	该事件在页面即将开始打印时触发
				拖动事件
					ondrag	该事件在元素正在拖动时触发	 
					ondragend	该事件在用户完成元素的拖动时触发	
					ondragenter	该事件在拖动的元素进入放置目标时触发	 
					ondragleave	该事件在拖动元素离开放置目标时触发
					ondragover	该事件在拖动元素在放置目标上时触发
					ondragstart	该事件在用户开始拖动元素时触发	
					ondrop	该事件在拖动元素放置在目标区域时触发
				多媒体事件
					onabort	事件在视频/音频（audio/video）终止加载时触发。	 
					oncanplay	事件在用户可以开始播放视频/音频（audio/video）时触发。	 
					oncanplaythrough	事件在视频/音频（audio/video）可以正常播放且无需停顿和缓冲时触发。	 
					ondurationchange	事件在视频/音频（audio/video）的时长发生变化时触发。	 
					onemptied	当期播放列表为空时触发	 
					onended	事件在视频/音频（audio/video）播放结束时触发。	 
					onerror	事件在视频/音频（audio/video）数据加载期间发生错误时触发。	 
					onloadeddata	事件在浏览器加载视频/音频（audio/video）当前帧时触发触发。	 
					onloadedmetadata	事件在指定视频/音频（audio/video）的元数据加载后触发。	 
					onloadstart	事件在浏览器开始寻找指定视频/音频（audio/video）触发。	 
					onpause	事件在视频/音频（audio/video）暂停时触发。	 
					onplay	事件在视频/音频（audio/video）开始播放时触发。	 
					onplaying	事件在视频/音频（audio/video）暂停或者在缓冲后准备重新开始播放时触发。	 
					onprogress	事件在浏览器下载指定的视频/音频（audio/video）时触发。	 
					onratechange	事件在视频/音频（audio/video）的播放速度发送改变时触发。	 
					onseeked	事件在用户重新定位视频/音频（audio/video）的播放位置后触发。	 
					onseeking	事件在用户开始重新定位视频/音频（audio/video）时触发。	 
					onstalled	事件在浏览器获取媒体数据，但媒体数据不可用时触发。	 
					onsuspend	事件在浏览器读取媒体数据中止时触发。	 
					ontimeupdate	事件在当前的播放位置发送改变时触发。	 
					onvolumechange	事件在音量发生改变时触发。	 
					onwaiting	事件在视频由于要播放下一帧而需要缓冲时触发。
				动画事件
					animationend	该事件在 CSS 动画结束播放时触发	 
					animationiteration	该事件在 CSS 动画重复播放时触发	 
					animationstart	该事件在 CSS 动画开始播放时触发
				方法
					addEventListener()	允许在目标事件中注册监听事件(IE8 = attachEvent())	
					dispatchEvent()	允许发送事件到监听器上 (IE8 = fireEvent())	
					removeEventListener()	运行一次注册在事件目标上的监听事件(IE8 = detachEvent())
				鼠标键盘事件对象
					altKey	返回当事件被触发时，"ALT" 是否被按下。
					button	返回当事件被触发时，哪个鼠标按钮被点击
					clientX	返回当事件被触发时，鼠标指针的水平坐标
					clientY	返回当事件被触发时，鼠标指针的垂直坐标
					ctrlKey	返回当事件被触发时，"CTRL" 键是否被按下
					Location	返回按键在设备上的位置
					charCode	返回onkeypress事件触发键值的字母代码
					key	在按下按键时返回按键的标识符
					keyCode	返回onkeypress事件触发的键的值的字符代码，或者 onkeydown 或 onkeyup 事件的键的代码
					which	返回onkeypress事件触发的键的值的字符代码，或者 onkeydown 或 onkeyup 事件的键的代码
					metaKey	返回当事件被触发时，"meta" 键是否被按下
					relatedTarget	返回与事件的目标节点相关的节点
					screenX	返回当某个事件被触发时，鼠标指针的水平坐标
					screenY	返回当某个事件被触发时，鼠标指针的垂直坐标
					shiftKey	返回当事件被触发时，"SHIFT" 键是否被按下。
	HTML






	src
	style
	事件onclick
	setInterval() clearInterval()
	setTimeout() clearTimeout()


	